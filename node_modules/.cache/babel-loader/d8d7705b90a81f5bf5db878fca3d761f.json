{"ast":null,"code":"import axios from \"axios\";\nconst actions = {\n  setUserId: value => ({\n    setState,\n    getState\n  }) => {\n    const currState = getState();\n    setState({ ...currState,\n      userId: value\n    });\n  },\n  //TODO: Handler error code from BE\n  signIn: data => async ({\n    setState,\n    getState\n  }) => {\n    setState({\n      accessToken: \"\",\n      userId: \"\",\n      userEmail: \"\",\n      errorMessage: \"\",\n      userName: \"\"\n    });\n\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_PATIENT_SERVER_URL}/signin`, data);\n      setState({\n        accessToken: response.data.accessToken,\n        userId: response.data.id,\n        userEmail: response.data.email,\n        userName: response.data.fullName\n      });\n    } catch (error) {\n      if (error.response.data.status === 401) {\n        setState({\n          accessToken: \"\",\n          userId: \"\",\n          userEmail: \"\",\n          userName: \"\",\n          errorMessage: \"Email or password is incorrect\"\n        });\n      } else {\n        setState({\n          accessToken: \"\",\n          userId: \"\",\n          userEmail: \"\",\n          userName: \"\",\n          errorMessage: error.response.data.errorMessage\n        });\n      }\n    }\n  },\n  myProfile: (data, header) => async ({\n    setState,\n    getState\n  }) => {\n    setState({\n      userId: \"\",\n      userEmail: \"\",\n      errorMessage: \"\",\n      userName: \"\",\n      phone: \"\",\n      errorMessage: \"\"\n    });\n\n    try {\n      console.log(\"get into the function\");\n      const response = await axios.put(`${process.env.REACT_APP_PATIENT_SERVER_URL}/info`, data, {\n        headers: header\n      });\n      setState({\n        userEmail: response.data.email,\n        userName: response.data.fullName,\n        phone: response.data.phone,\n        userId: response.data.id\n      });\n    } catch (error) {\n      if (error.response.data.status === 401) {\n        setState({\n          userId: \"\",\n          userEmail: \"\",\n          userName: \"\",\n          phone: \"\",\n          errorMessage: \"Unauthorized\"\n        });\n      } else {\n        setState({\n          userId: \"\",\n          userEmail: \"\",\n          userName: \"\",\n          phone: \"\",\n          errorMessage: error.response.data.errorMessage\n        });\n      }\n    }\n  },\n  signUp: (data, fullName) => async ({\n    setState,\n    getState\n  }) => {\n    setState({\n      errorMessage: \"\",\n      userEmail: \"\",\n      accessToken: \"\",\n      userId: \"\",\n      userName: fullName\n    });\n\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_PATIENT_SERVER_URL}/registration`, data);\n      setState({\n        userEmail: response.data.email,\n        userName: fullName\n      });\n    } catch (error) {\n      setState({\n        accessToken: \"\",\n        userId: \"\",\n        userName: \"\",\n        userEmail: \"\",\n        errorMessage: error.response.data.errorMessage\n      });\n    }\n  },\n  confirmOTP: data => async ({\n    setState,\n    getState\n  }) => {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_PATIENT_SERVER_URL}/registration/confirm?token=${data}&email=${getState().userEmail}`);\n      setState({\n        accessToken: response.data.token,\n        userId: response.data.id\n      });\n    } catch (error) {\n      setState({\n        accessToken: \"\",\n        userId: \"\",\n        userEmail: getState().userEmail,\n        userName: \"\",\n        errorMessage: error.response.data.errorMessage\n      });\n    }\n  },\n  resendOTP: () => async ({\n    setState,\n    getState\n  }) => {\n    setState({\n      errorMessage: \"\"\n    });\n\n    try {\n      await axios.get(`${process.env.REACT_APP_PATIENT_SERVER_URL}/sendtoken&email=${getState().userEmail}`);\n    } catch (error) {}\n  },\n  signOut: () => async ({\n    setState,\n    getState\n  }) => {\n    setState({\n      accessToken: \"\",\n      userId: \"\",\n      userEmail: \"\",\n      userName: \"\",\n      errorMessage: \"\",\n      noti: []\n    });\n  },\n  savePreviousLocation: location => ({\n    getState,\n    setState\n  }) => {\n    setState({\n      previousLocation: location\n    });\n  },\n  deletePreviousLocation: () => ({\n    getState,\n    setState\n  }) => {\n    setState({\n      previousLocation: \"\"\n    });\n  },\n  clearErrorMessage: () => async ({\n    setState,\n    getState\n  }) => {\n    setState({\n      errorMessage: \"\"\n    });\n  },\n  saveNoti: data => ({\n    setState,\n    getState\n  }) => {\n    const currNoti = [...getState().noti];\n    setState({ ...getState(),\n      noti: [data, ...currNoti]\n    });\n  },\n  removeNoti: () => ({\n    setState,\n    getState\n  }) => {\n    setState({ ...getState(),\n      noti: getState().noti\n    });\n  }\n};\nexport default actions;","map":{"version":3,"sources":["/Users/lehaibmt/deploy v2/hiclinic-patient-portal/src/store/authenticate/actions.js"],"names":["axios","actions","setUserId","value","setState","getState","currState","userId","signIn","data","accessToken","userEmail","errorMessage","userName","response","post","process","env","REACT_APP_PATIENT_SERVER_URL","id","email","fullName","error","status","myProfile","header","phone","console","log","put","headers","signUp","confirmOTP","get","token","resendOTP","signOut","noti","savePreviousLocation","location","previousLocation","deletePreviousLocation","clearErrorMessage","saveNoti","currNoti","removeNoti"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst actions = {\n  setUserId: (value) => ({ setState, getState }) => {\n    const currState = getState();\n    setState({\n      ...currState,\n      userId: value,\n    });\n  },\n\n  //TODO: Handler error code from BE\n  signIn: (data) => async ({ setState, getState }) => {\n    setState({\n      accessToken: \"\",\n      userId: \"\",\n      userEmail: \"\",\n      errorMessage: \"\",\n      userName: \"\",\n    });\n    try {\n      const response = await axios.post(\n        `${process.env.REACT_APP_PATIENT_SERVER_URL}/signin`,\n        data\n      );\n\n      setState({\n        accessToken: response.data.accessToken,\n        userId: response.data.id,\n        userEmail: response.data.email,\n        userName: response.data.fullName,\n      });\n    } catch (error) {\n      if (error.response.data.status === 401) {\n        setState({\n          accessToken: \"\",\n          userId: \"\",\n          userEmail: \"\",\n          userName: \"\",\n          errorMessage: \"Email or password is incorrect\",\n        });\n      } else {\n        setState({\n          accessToken: \"\",\n          userId: \"\",\n          userEmail: \"\",\n          userName: \"\",\n          errorMessage: error.response.data.errorMessage,\n        });\n      }\n    }\n  },\n  myProfile: (data, header) => async ({ setState, getState }) => {\n    setState({\n      userId: \"\",\n      userEmail: \"\",\n      errorMessage: \"\",\n      userName: \"\",\n      phone: \"\",\n      errorMessage: \"\",\n    });\n    try {\n      console.log(\"get into the function\");\n      const response = await axios.put(\n        `${process.env.REACT_APP_PATIENT_SERVER_URL}/info`,\n        data,\n        {\n          headers: header,\n        }\n      );\n      setState({\n        userEmail: response.data.email,\n        userName: response.data.fullName,\n        phone: response.data.phone,\n        userId: response.data.id,\n      });\n    } catch (error) {\n      if (error.response.data.status === 401) {\n        setState({\n          userId: \"\",\n          userEmail: \"\",\n          userName: \"\",\n          phone: \"\",\n          errorMessage: \"Unauthorized\",\n        });\n      } else {\n        setState({\n          userId: \"\",\n          userEmail: \"\",\n          userName: \"\",\n          phone: \"\",\n          errorMessage: error.response.data.errorMessage,\n        });\n      }\n    }\n  },\n\n  signUp: (data, fullName) => async ({ setState, getState }) => {\n    setState({\n      errorMessage: \"\",\n      userEmail: \"\",\n      accessToken: \"\",\n      userId: \"\",\n      userName: fullName,\n    });\n    try {\n      const response = await axios.post(\n        `${process.env.REACT_APP_PATIENT_SERVER_URL}/registration`,\n        data\n      );\n      setState({\n        userEmail: response.data.email,\n        userName: fullName,\n      });\n    } catch (error) {\n      setState({\n        accessToken: \"\",\n        userId: \"\",\n        userName: \"\",\n        userEmail: \"\",\n        errorMessage: error.response.data.errorMessage,\n      });\n    }\n  },\n\n  confirmOTP: (data) => async ({ setState, getState }) => {\n    try {\n      const response = await axios.get(\n        `${\n          process.env.REACT_APP_PATIENT_SERVER_URL\n        }/registration/confirm?token=${data}&email=${getState().userEmail}`\n      );\n      setState({\n        accessToken: response.data.token,\n        userId: response.data.id,\n      });\n    } catch (error) {\n      setState({\n        accessToken: \"\",\n        userId: \"\",\n        userEmail: getState().userEmail,\n        userName: \"\",\n        errorMessage: error.response.data.errorMessage,\n      });\n    }\n  },\n\n  resendOTP: () => async ({ setState, getState }) => {\n    setState({\n      errorMessage: \"\",\n    });\n    try {\n      await axios.get(\n        `${process.env.REACT_APP_PATIENT_SERVER_URL}/sendtoken&email=${\n          getState().userEmail\n        }`\n      );\n    } catch (error) {}\n  },\n\n  signOut: () => async ({ setState, getState }) => {\n    setState({\n      accessToken: \"\",\n      userId: \"\",\n      userEmail: \"\",\n      userName: \"\",\n      errorMessage: \"\",\n      noti: [],\n    });\n  },\n\n  savePreviousLocation: (location) => ({ getState, setState }) => {\n    setState({\n      previousLocation: location,\n    });\n  },\n\n  deletePreviousLocation: () => ({ getState, setState }) => {\n    setState({\n      previousLocation: \"\",\n    });\n  },\n\n  clearErrorMessage: () => async ({ setState, getState }) => {\n    setState({\n      errorMessage: \"\",\n    });\n  },\n\n  saveNoti: (data) => ({ setState, getState }) => {\n    const currNoti = [...getState().noti];\n    setState({\n      ...getState(),\n      noti: [data, ...currNoti],\n    });\n  },\n  removeNoti: () => ({ setState, getState }) => {\n    setState({\n      ...getState(),\n      noti: getState().noti,\n    });\n  },\n};\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}